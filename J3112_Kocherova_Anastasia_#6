class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();

        if(n == 0 || s[0] == '0'){
            return 0;
        }

        vector<int> arr(n + 1, 0);
        arr[0] = 1;
        arr[1] = 1;
        for (int i=2; i <= n; i++){
            if (s[i - 1] != '0'){
                arr[i] += arr[i - 1];
            }
        
            int two_digits = (s[i - 2] - '0') * 10 + (s[i -1] - '0');
            if (two_digits >= 10 && two_digits <= 26){
                arr[i] += arr[i - 2];
            }

        }
        return arr[n];
        }
};


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(); //строки
        int n = grid[0].size(); //столбцы
        vector<vector<int>> field(m, vector<int>(n, 0));

        field[0][0] = grid[0][0];
        for (int i=1; i < n; i++){
            field[0][i] = field[0][i - 1] + grid[0][i];
        }

        for (int j=1; j < m; j++){
            field[j][0] = field[j - 1][0] + grid[j][0];
        }

        for (int i=1; i < m; i++){
            for (int j=1; j<n; j++){
                field[i][j] = min(field[i -1][j], field[i][j-1]) + grid[i][j];
            }
        }
        return field[m-1][n-1];
    }
};
