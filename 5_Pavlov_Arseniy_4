#include <iostream>
#include <vector>
#include <cmath>
#include <limits>
#include <numeric>
#include <algorithm>
#include <cassert>

using namespace std;

// Функция для вычисления ошибки кластера
double clusterError(const vector<double>& arr, int start, int end) {
    double sum = 0;
    for (int i = start; i < end; ++i) {
        sum += arr[i];
    }
    double mean = sum / (end - start);

    double error = 0;
    for (int i = start; i < end; ++i) {
        error += abs(arr[i] - mean);
    }
    return error;
}
//Сложность: O(N)

// Рекурсивная функция с мемоизацией для нахождения минимальной ошибки разбиения и восстановления оптимальных кластеров
double minClusterError(const vector<double>& arr, int n, int k, vector<vector<double>>& dp, vector<vector<int>>& split) {
    if (k == 0 && n == 0) return 0;
    if (k == 0 || n == 0) return numeric_limits<double>::infinity();
    if (dp[n][k] >= 0) return dp[n][k];

    double minError = numeric_limits<double>::infinity();
    for (int i = 1; i <= n; ++i) {
        double error = clusterError(arr, n - i, n);
        double totalError = error + minClusterError(arr, n - i, k - 1, dp, split);
        
        if (totalError < minError) {
            minError = totalError;
            split[n][k] = n - i; // Запоминаем точку разбиения
        }
    }

    dp[n][k] = minError;
    return minError;
}
//Сложность: O(N^2 * K), где N - размер входного массива, K - количество кластеров

// Восстановление кластеров на основе записей в split
vector<vector<double>> getClusters(const vector<double>& arr, int n, int k, const vector<vector<int>>& split) {
    vector<vector<double>> clusters;
    int current = n;
    while (k > 0) {
        int prev = split[current][k];
        clusters.push_back(vector<double>(arr.begin() + prev, arr.begin() + current));
        current = prev;
        --k;
    }
    reverse(clusters.begin(), clusters.end()); // Чтобы сохранить порядок кластеров
    return clusters;
}
//Сложноть: O(K)
//Общая сложность: O(N^2 * K + N * log N)


void test1() {
    const int K = 9;
    vector<double> arr1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
    int n = arr1.size();
    
    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    double start1;
    double end1;
    sort(arr1.begin(), arr1.end());
    
    double error = clusterError(arr1, start1, end1);
    double minError = minClusterError(arr1, n, K, dp, split);
    vector<vector<double>> clusters1 = getClusters(arr1, n, K, split);
    vector<vector<double>> result1 = {
        {1, 2, 3}, {4, 5, 6}, {7, 8, 9},
        {10, 11, 12}, {13, 14, 15}, {16, 17, 18},
        {19, 20, 21}, {22, 23, 24}, {25}
    };
    assert(clusters1 == result1);
}

void test2() {
    const int K = 9;
    vector<double> arr2 = {1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25};
    int n = arr2.size();
    
    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    sort(arr2.begin(), arr2.end());
    
    double minError = minClusterError(arr2, n, K, dp, split);
    vector<vector<double>> clusters2 = getClusters(arr2, n, K, split);
    
    vector<vector<double>> result2 = {
        {-24, -22, -20}, {-18, -16, -14}, {-12, -10, -8},
        {-6, -4, -2}, {1, 3, 5}, {7, 9, 11},
        {13, 15, 17}, {19, 21, 23}, {25}
    };
    
    assert(clusters2 == result2);
}

void test3() {
    const int K = 2;
    vector<double> arr3 = {101, -1.1, 99.5};
    int n = arr3.size();
    sort(arr3.begin(), arr3.end());

    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    double start3;
    double end3;

    double error = clusterError(arr3, start3, end3);
    double minError = minClusterError(arr3, n, K, dp, split);
    vector<vector<double>> clusters3 = getClusters(arr3, n, K, split);
    vector<vector<double>> result3 = {{-1.1}, {99.5, 101}};
    assert(clusters3 == result3);
}
void test4() {
    const int K = 10;
    vector<double> arr4 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int n = arr4.size();
    sort(arr4.begin(), arr4.end());

    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    double start4;
    double end4;

    double error = clusterError(arr4, start4, end4);
    double minError = minClusterError(arr4, n, K, dp, split);
    vector<vector<double>> clusters4 = getClusters(arr4, n, K, split);
    vector<vector<double>> result4 = {{0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}};
    assert(clusters4 == result4);
}
void test5(){
    const int K = 0;
    vector<double> arr5 = {1, 2, 3, 4, 5, 6, 7};
    int n = arr5.size();
    sort(arr5.begin(), arr5.end());

    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    double start5;
    double end5;

    double error = clusterError(arr5, start5, end5);
    double minError = minClusterError(arr5, n, K, dp, split);
    assert(minError == numeric_limits<double>::infinity());
    
}
void test6(){
    const int K = 10;
    vector<double> arr6 = {};
    int n = arr6.size();
    sort(arr6.begin(), arr6.end());

    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, 0));
    double start6;
    double end6;

    double error = clusterError(arr6, start6, end6);
    double minError = minClusterError(arr6, n, K, dp, split);
    assert(minError == numeric_limits<double>::infinity());
    
}

int main() {
    
    test1();
    test2();
    test3();
    test4();
    test5();
    test6();
    
    int size;
    cout << "Введите количество элементов массива: ";
    cin >> size;

    vector<double> arr(size);
    cout << "Введите элементы массива:\n";
    for (int i = 0; i < size; ++i) {
        cin >> arr[i];
    }

    int k;
    cout << "Введите количество кластеров: ";
    cin >> k;
    const int K = k;
    int n = arr.size();
    
    // Сортировка массива
    sort(arr.begin(), arr.end());

    // Инициализация DP таблицы и таблицы разбиений
    vector<vector<double>> dp(n + 1, vector<double>(K + 1, -1.0));
    vector<vector<int>> split(n + 1, vector<int>(K + 1, -1));

    // Нахождение минимальной ошибки и заполнение split
    double result = minClusterError(arr, n, K, dp, split);

    // Восстановление кластеров
    vector<vector<double>> clusters = getClusters(arr, n, K, split);

    // Вывод результатов
    cout << "Минимальная ошибка для разбиения на " << K << " кластеров: " << result << endl;
    cout << "Кластеры:" << endl;
    for (const auto& cluster : clusters) {
        for (double val : cluster) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
