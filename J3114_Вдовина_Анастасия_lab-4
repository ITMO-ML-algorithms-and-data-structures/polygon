#include <iostream>
#include <vector>
#include <algorithm>

void findSubarraysWithZeroSum(const std::vector<int>& arr, int K) {
    int N = arr.size();
    std::vector<std::vector<int>> result;

    std::vector<int> indices(K);
    for (int i = 0; i < K; ++i) {
        indices[i] = i;
    }

    bool done = false;
    while (!done) {
        int sum = 0;
        for (int i = 0; i < K; ++i) {
            sum += arr[indices[i]];
        }

        if (sum == 0) {
            result.push_back(indices);
        }

        done = true;
        for (int i = K - 1; i >= 0; --i) {
            if (++indices[i] < N - (K - 1 - i)) {
                for (int j = i + 1; j < K; ++j) {
                    indices[j] = indices[j - 1] + 1;
                }
                done = false;
                break;
            }
        }
    }

    for (const auto& lst : result) {
        std::cout << "[";
        for (size_t i = 0; i < lst.size(); ++i) {
            std::cout << lst[i];
            if (i < lst.size() - 1) {
                std::cout << ",";
            }
        }
        std::cout << "] " << std::endl;
    }
}

int main() {
    std::vector<int> array = {1, -1, -1, 2, 0, -2, 1, -1, 3, -3, 4, -4, 5, -5, 0, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10};
    int K = 10;
    findSubarraysWithZeroSum(array, K);

    return 0;
}
