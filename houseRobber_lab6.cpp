// House Robber

#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.empty()) return 0; // Если нет домов, возвращаем 0
        if (nums.size() == 1) return nums[0]; // Если только один дом, возвращаем его значение

        // Массив для хранения максимальной суммы до i-го дома
        vector<int> dp(nums.size()); // 4*n байт, где n-количество домов
        
        // Инициализация первых двух домов
        dp[0] = nums[0]; // Максимум для первого дома
        dp[1] = max(nums[0], nums[1]); // Максимум для первых двух домов

        // Заполнение массива dp
        for (size_t i = 2; i < nums.size(); ++i) {
            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]); // Решение для текущего дома
        }

        // Максимальная сумма будет в последнем элементе
        return dp.back();
    }
};

int main() {
    Solution solution;
    vector<int> houses = {2, 7, 9, 3, 1}; // 4*n байт, где n-количество домов
    cout << "The maximum amount of money you can rob tonight : " << solution.rob(houses) << endl;
    return 0;
}

// подсчет памяти: 4n + 4n = 8n, где n-количество домов

// временаая сложность: O(n)
// пространственная сложность: O(n)

// В решении данной задачи эффективно использовать динамическое программирование по нескольким причина: 
// 1. задачу удобно разбить на подзадачи, т.к. решение для i-ого дома зависит от решений предыдущих домов
// 2. используя ДП, можно решить задачу за линейное время O(n), что значительно быстрее, чем методы с полным перебором 

