#include <iostream>
#include <vector>

//Функция для удаления дубликатов в массиве
//N - кол-во элементов в исходном массиве
//n - количество элементов новом массиве
std::vector<int> removeDuplicates(std::vector<int>& numbers) {
    std::vector<int> result; // O(1), 0 байт (вектор не требует памяти, пока в нем нет элементов)

    for (int i = 0; i < numbers.size(); i++) { // O(N) - внешний цикл по элементам входного массива, 
        bool isDublicate = false; // O(1) - созданние переменной, занимает 1 байт
        for (int j = 0; j < i; j++) { // O(i) 
            if (numbers[i] == numbers[j]) { // O(1)
                isDublicate = true; // O(1), не требует затрат дополнительной памяти
                break; 
            }
        }
        if (!isDublicate) { // O(1)
            result.push_back(numbers[i]); // O(1), 4n - для каждого нового элемента необходимо 4 байта
        }
    }
    return result;
    // O(N^2) - общая сложность алгоритма
}

int main() {
    {
        std::vector<int> numbers = { 1, 2, 3, 1 }; //O(1), 4N байт - для каждого нового элемента необходимо 4 байта
        std::vector<int> result = removeDuplicates(numbers); //O(N^2)

        std::cout << "["; // O(1) - Вывод начала массива
        for (int i = 0; i < result.size(); i++) {
            std::cout << result[i];        // O(n) - Вывод текущего элемента
            if (i < result.size() - 1)     // O(1) - Если это не последний элемент
                std::cout << ", ";       // O(1) - Вывод запятой
        }
        std::cout << "]" << std::endl; // O(1) - Закрываем массив и переходим на новую строку
    }
    // вывод не требует дополнительной памяти

    return 0;
}
// Общая оценка используемой памяти:
// Память для вектора numbers: 4N, где N - количество элементов (до 1е4)
// Память для вектора result: 4n, где n - количество элементов (в худшем случае n = N, в лучшем n = 1)
// Переменная isDublicate: 1 байт 
// Итоговая память: O(N)
// Временная сложность:
// Внешний цикл: пробегает по всем элементам исходного векторa - O(N)
// Вложенный цикл: в худшем случае O(n ^ 2)
// Общая временная сложность : O(n ^ 2)
