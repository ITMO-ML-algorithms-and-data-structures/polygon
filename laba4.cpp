#include <iostream>
#include <vector>
#include <cassert>
#include <chrono>

using namespace std;

// Функция для поиска подмассивов размера 4 с суммой равной 0
vector<vector<int>> findZeroSumSubarrays(const vector<int>& arr) {
    vector<vector<int>> result;
    int n = arr.size();

    for (int i = 0; i < n - 3; ++i) {
        for (int j = i + 1; j < n - 2; ++j) {
            for (int k = j + 1; k < n - 1; ++k) {
                for (int l = k + 1; l < n; ++l) {
                    if (arr[i] + arr[j] + arr[k] + arr[l] == 0) {
                        result.push_back({ i, j, k, l });
                    }
                }
            }
        }
    }
    return result;
}

// Тестирование функции
void test() {
    vector<int> testArray1 = { 1 };
    vector<vector<int>> result1 = findZeroSumSubarrays(testArray1);
    assert(result1 == vector<vector<int>> {});

    vector<int> testArray2 = { 1, -1, 2, -3, 0 };
    vector<vector<int>> result2 = findZeroSumSubarrays(testArray2);
    assert((result2 == vector<vector<int>> {{ 0, 2, 3, 4 }}));

    vector<int> testArray3 = { -1, -3, -5, -12, 5, 4, 0, 18, -54, 2 };
    vector<vector<int>> result3 = findZeroSumSubarrays(testArray3);
    assert((result3 == vector<vector<int>> { {0, 1, 5, 6}, { 0, 2, 3, 7 }, { 0, 2, 5, 9 } }));

    vector<int> testArray4 = { 1, -1, 2, 1, 3, -3, -5, -12, 3, 5, 4, 0, 18, -54, 23 };
    vector<vector<int>> result4 = findZeroSumSubarrays(testArray4);
    assert((result4 == vector<vector<int>> { {0, 1, 4, 5}, { 0, 1, 5, 8 }, { 0, 1, 6, 9 }, { 0, 2, 5, 11 }, { 0, 3, 4, 6 }, { 0, 3, 6, 8 }, { 0, 6, 10, 11 }, { 1, 2, 6, 10 }, { 1, 3, 4, 5 }, { 1, 3, 5, 8 }, { 1, 3, 6, 9 }, { 1, 4, 6, 8 }, { 1, 5, 10, 11 }, { 1, 6, 7, 12 }, { 2, 3, 5, 11 }, { 2, 4, 6, 11 }, { 2, 6, 8, 11 }, { 3, 6, 10, 11 }, { 4, 5, 6, 9 }, { 4, 7, 9, 10 }, { 5, 6, 8, 9 }, { 7, 8, 9, 10 } }));

    vector<int> testArray5 = { 1, -1, 2, -2, 1, 3, -3, -5, -12, 3, 5, 4, 7, 9, -36, -9, 14, 0, 8, -52 };
    vector<vector<int>> result5 = findZeroSumSubarrays(testArray5);
    assert((result5 == vector<vector<int>> { {0, 1, 2, 3}, { 0, 1, 5, 6 }, { 0, 1, 6, 9 }, { 0, 1, 7, 10 }, { 0, 1, 13, 15 }, { 0, 2, 6, 17 }, { 0, 2, 8, 13 }, { 0, 3, 4, 17 }, { 0, 3, 6, 11 }, { 0, 4, 5, 7 }, { 0, 4, 7, 9 }, { 0, 4, 12, 15 }, { 0, 5, 8, 18 }, { 0, 5, 10, 15 }, { 0, 6, 7, 12 }, { 0, 6, 8, 16 }, { 0, 7, 11, 17 }, { 0, 8, 9, 18 }, { 0, 8, 11, 12 }, { 0, 9, 10, 15 }, { 0, 15, 17, 18 }, { 1, 2, 3, 4 }, { 1, 2, 7, 11 }, { 1, 2, 15, 18 }, { 1, 3, 5, 17 }, { 1, 3, 7, 18 }, { 1, 3, 9, 17 }, { 1, 4, 5, 6 }, { 1, 4, 6, 9 }, { 1, 4, 7, 10 }, { 1, 4, 13, 15 }, { 1, 5, 7, 9 }, { 1, 5, 12, 15 }, { 1, 6, 7, 13 }, { 1, 6, 11, 17 }, { 1, 8, 10, 18 }, { 1, 8, 11, 13 }, { 1, 9, 12, 15 }, { 2, 3, 5, 6 }, { 2, 3, 6, 9 }, { 2, 3, 7, 10 }, { 2, 3, 13, 15 }, { 2, 4, 6, 17 }, { 2, 4, 8, 13 }, { 2, 5, 7, 17 }, { 2, 5, 8, 12 }, { 2, 5, 11, 15 }, { 2, 7, 9, 17 }, { 2, 8, 9, 12 }, { 2, 9, 11, 15 }, { 2, 12, 15, 17 }, { 3, 4, 6, 11 }, { 3, 5, 7, 11 }, { 3, 5, 15, 18 }, { 3, 6, 10, 17 }, { 3, 6, 15, 16 }, { 3, 7, 9, 11 }, { 3, 7, 12, 17 }, { 3, 8, 10, 13 }, { 3, 8, 16, 17 }, { 3, 9, 15, 18 }, { 3, 11, 12, 15 }, { 4, 5, 8, 18 }, { 4, 5, 10, 15 }, { 4, 6, 7, 12 }, { 4, 6, 8, 16 }, { 4, 7, 11, 17 }, { 4, 8, 9, 18 }, { 4, 8, 11, 12 }, { 4, 9, 10, 15 }, { 4, 15, 17, 18 }, { 5, 6, 7, 10 }, { 5, 6, 13, 15 }, { 5, 7, 8, 16 }, { 5, 8, 10, 11 }, { 5, 8, 13, 17 }, { 6, 7, 9, 10 }, { 6, 7, 17, 18 }, { 6, 8, 12, 18 }, { 6, 9, 13, 15 }, { 6, 10, 12, 15 }, { 6, 11, 15, 18 }, { 7, 8, 9, 16 }, { 7, 8, 13, 18 }, { 7, 10, 13, 15 }, { 7, 15, 16, 17 }, { 8, 9, 10, 11 }, { 8, 9, 13, 17 }, { 8, 10, 12, 17 }, { 8, 11, 17, 18 }, { 8, 12, 15, 16 }, { 10, 11, 15, 17 } }));

    vector<int> testArray6 = { 1, -1, 2, -2, 1, 3, -3, -5, -12, 3, 5, 4, 0, 18, -54, 45, 23, -15, -112, 5, 8, 3, 6, 9, 29 };
    vector<vector<int>> result6 = findZeroSumSubarrays(testArray6);
    assert((result6 == vector<vector<int>> { {0, 1, 2, 3}, { 0, 1, 5, 6 }, { 0, 1, 6, 9 }, { 0, 1, 6, 21 }, { 0, 1, 7, 10 }, { 0, 1, 7, 19 }, { 0, 2, 6, 12 }, { 0, 2, 8, 23 }, { 0, 3, 4, 12 }, { 0, 3, 6, 11 }, { 0, 3, 7, 22 }, { 0, 4, 5, 7 }, { 0, 4, 7, 9 }, { 0, 4, 7, 21 }, { 0, 5, 8, 20 }, { 0, 7, 11, 12 }, { 0, 8, 9, 20 }, { 0, 8, 10, 22 }, { 0, 8, 19, 22 }, { 0, 8, 20, 21 }, { 0, 10, 17, 23 }, { 0, 14, 15, 20 }, { 0, 17, 19, 23 }, { 0, 17, 20, 22 }, { 1, 2, 3, 4 }, { 1, 2, 7, 11 }, { 1, 3, 5, 12 }, { 1, 3, 6, 22 }, { 1, 3, 7, 20 }, { 1, 3, 9, 12 }, { 1, 3, 12, 21 }, { 1, 3, 13, 17 }, { 1, 4, 5, 6 }, { 1, 4, 6, 9 }, { 1, 4, 6, 21 }, { 1, 4, 7, 10 }, { 1, 4, 7, 19 }, { 1, 5, 7, 9 }, { 1, 5, 7, 21 }, { 1, 6, 7, 23 }, { 1, 6, 11, 12 }, { 1, 7, 8, 13 }, { 1, 7, 9, 21 }, { 1, 7, 12, 22 }, { 1, 8, 10, 20 }, { 1, 8, 11, 23 }, { 1, 8, 19, 20 }, { 2, 3, 5, 6 }, { 2, 3, 6, 9 }, { 2, 3, 6, 21 }, { 2, 3, 7, 10 }, { 2, 3, 7, 19 }, { 2, 4, 6, 12 }, { 2, 4, 8, 23 }, { 2, 5, 7, 12 }, { 2, 6, 7, 22 }, { 2, 7, 9, 12 }, { 2, 7, 12, 21 }, { 2, 7, 13, 17 }, { 2, 8, 10, 19 }, { 2, 8, 11, 22 }, { 2, 10, 17, 20 }, { 2, 11, 17, 23 }, { 2, 14, 16, 24 }, { 2, 17, 19, 20 }, { 3, 4, 6, 11 }, { 3, 4, 7, 22 }, { 3, 5, 7, 11 }, { 3, 6, 10, 12 }, { 3, 6, 12, 19 }, { 3, 7, 9, 11 }, { 3, 7, 11, 21 }, { 3, 8, 10, 23 }, { 3, 8, 17, 24 }, { 3, 8, 19, 23 }, { 3, 8, 20, 22 }, { 3, 17, 20, 23 }, { 4, 5, 8, 20 }, { 4, 7, 11, 12 }, { 4, 8, 9, 20 }, { 4, 8, 10, 22 }, { 4, 8, 19, 22 }, { 4, 8, 20, 21 }, { 4, 10, 17, 23 }, { 4, 14, 15, 20 }, { 4, 17, 19, 23 }, { 4, 17, 20, 22 }, { 5, 6, 7, 10 }, { 5, 6, 7, 19 }, { 5, 8, 9, 22 }, { 5, 8, 10, 11 }, { 5, 8, 11, 19 }, { 5, 8, 12, 23 }, { 5, 8, 21, 22 }, { 5, 9, 17, 23 }, { 5, 11, 17, 20 }, { 5, 14, 15, 22 }, { 5, 17, 21, 23 }, { 6, 7, 9, 10 }, { 6, 7, 9, 19 }, { 6, 7, 10, 21 }, { 6, 7, 12, 20 }, { 6, 7, 16, 17 }, { 6, 7, 19, 21 }, { 6, 8, 22, 23 }, { 6, 12, 13, 17 }, { 7, 8, 20, 23 }, { 8, 9, 10, 11 }, { 8, 9, 11, 19 }, { 8, 9, 12, 23 }, { 8, 9, 21, 22 }, { 8, 10, 11, 21 }, { 8, 11, 12, 20 }, { 8, 11, 16, 17 }, { 8, 11, 19, 21 }, { 8, 12, 21, 23 }, { 8, 13, 17, 23 }, { 9, 11, 17, 20 }, { 9, 14, 15, 22 }, { 9, 17, 21, 23 }, { 10, 11, 14, 15 }, { 10, 11, 17, 22 }, { 11, 14, 15, 19 }, { 11, 17, 19, 22 }, { 11, 17, 20, 21 }, { 12, 14, 15, 23 }, { 12, 17, 22, 23 }, { 14, 15, 21, 22 } }));

    vector<int> testArray7 = { 0, 0, 0, 0, 0 };
    vector<vector<int>> result7 = findZeroSumSubarrays(testArray7);
    assert((result7 == vector<vector<int>> { {0, 1, 2, 3}, { 0, 1, 2, 4 }, { 0, 1, 3, 4 }, { 0, 2, 3, 4 }, { 1, 2, 3, 4 } }));

    vector<int> testArray8 = { 1, 3, 4, 5, 2 };
    vector<vector<int>> result8 = findZeroSumSubarrays(testArray8);
    assert(result8 == vector<vector<int>> {});

    vector<int> testArray9 = { -1, -2, -3, -15, -9 };
    vector<vector<int>> result9 = findZeroSumSubarrays(testArray9);
    assert(result9 == vector<vector<int>> {});

    cout << "all tests done!" << endl;
}

int main() {
    test(); // Запуск тестов

    vector<int> arr = { 1, -1, 2, -2, 1, 3, -3, -5, -12, 3, 5, 4, 0, 18, -54, 45, 23, -15, -112, 5, 8, 3, 6, 9, 29 };
    auto start = chrono::high_resolution_clock::now();
    vector<vector<int>> result = findZeroSumSubarrays(arr);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed = end - start;
    cout << elapsed.count() << " seconds";

    return 0;
}